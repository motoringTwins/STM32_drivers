
STM32F407_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d8c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000f34  08000f34  00010f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f58  08000f58  00010f60  2**0
                  CONTENTS
  4 .ARM          00000000  08000f58  08000f58  00010f60  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000f58  08000f60  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f58  08000f58  00010f58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000f5c  08000f5c  00010f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010f60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000f60  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000f60  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010f60  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001de8  00000000  00000000  00010f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000515  00000000  00000000  00012d72  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b8  00000000  00000000  00013288  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000180  00000000  00000000  00013440  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000024a3  00000000  00000000  000135c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001351  00000000  00000000  00015a63  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000943d  00000000  00000000  00016db4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000201f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ac  00000000  00000000  0002026c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000f1c 	.word	0x08000f1c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000f1c 	.word	0x08000f1c

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <delay>:
#define CMD_LED_READ      0x52U
#define CMD_PRINT         0x53U
#define CMD_ID_READ       0x54U

void delay(void)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b083      	sub	sp, #12
 80001fc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2; i++);
 80001fe:	2300      	movs	r3, #0
 8000200:	607b      	str	r3, [r7, #4]
 8000202:	e002      	b.n	800020a <delay+0x12>
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	4a03      	ldr	r2, [pc, #12]	; (800021c <delay+0x24>)
 800020e:	4293      	cmp	r3, r2
 8000210:	d9f8      	bls.n	8000204 <delay+0xc>
}
 8000212:	bf00      	nop
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	bc80      	pop	{r7}
 800021a:	4770      	bx	lr
 800021c:	0003d08f 	.word	0x0003d08f

08000220 <CmdIDReadAdruino>:

//APi to ID read
uint8_t CmdIDReadAdruino(char* Buffer, uint32_t len)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b084      	sub	sp, #16
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 8000228:	6039      	str	r1, [r7, #0]
	uint8_t dummy_byte = 0xff;
 800022a:	23ff      	movs	r3, #255	; 0xff
 800022c:	72fb      	strb	r3, [r7, #11]
	uint8_t dummy_read = 0xff;
 800022e:	23ff      	movs	r3, #255	; 0xff
 8000230:	72bb      	strb	r3, [r7, #10]
	uint8_t Cmd = CMD_ID_READ;
 8000232:	2354      	movs	r3, #84	; 0x54
 8000234:	727b      	strb	r3, [r7, #9]
	uint8_t rx_buff = 0x00;
 8000236:	2300      	movs	r3, #0
 8000238:	723b      	strb	r3, [r7, #8]

	SPI_SendData(SPI2, &Cmd, 1);
 800023a:	f107 0309 	add.w	r3, r7, #9
 800023e:	2201      	movs	r2, #1
 8000240:	4619      	mov	r1, r3
 8000242:	4821      	ldr	r0, [pc, #132]	; (80002c8 <CmdIDReadAdruino+0xa8>)
 8000244:	f000 fd8c 	bl	8000d60 <SPI_SendData>
	//To clear RXNE flag
	SPI_RecieveData(SPI2, &dummy_read, 1);
 8000248:	f107 030a 	add.w	r3, r7, #10
 800024c:	2201      	movs	r2, #1
 800024e:	4619      	mov	r1, r3
 8000250:	481d      	ldr	r0, [pc, #116]	; (80002c8 <CmdIDReadAdruino+0xa8>)
 8000252:	f000 fdbb 	bl	8000dcc <SPI_RecieveData>

	//Send dummy byte to start Receive
	SPI_SendData(SPI2, &dummy_byte, 1);
 8000256:	f107 030b 	add.w	r3, r7, #11
 800025a:	2201      	movs	r2, #1
 800025c:	4619      	mov	r1, r3
 800025e:	481a      	ldr	r0, [pc, #104]	; (80002c8 <CmdIDReadAdruino+0xa8>)
 8000260:	f000 fd7e 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &rx_buff, 1);
 8000264:	f107 0308 	add.w	r3, r7, #8
 8000268:	2201      	movs	r2, #1
 800026a:	4619      	mov	r1, r3
 800026c:	4816      	ldr	r0, [pc, #88]	; (80002c8 <CmdIDReadAdruino+0xa8>)
 800026e:	f000 fdad 	bl	8000dcc <SPI_RecieveData>

	if(rx_buff == 0xF5)
 8000272:	7a3b      	ldrb	r3, [r7, #8]
 8000274:	2bf5      	cmp	r3, #245	; 0xf5
 8000276:	d121      	bne.n	80002bc <CmdIDReadAdruino+0x9c>
	{
		uint32_t i = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
		for(i=0; i<len; i++)
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	e011      	b.n	80002a6 <CmdIDReadAdruino+0x86>
		{
			//Send data to print
			SPI_SendData(SPI2, &dummy_byte, 1);
 8000282:	f107 030b 	add.w	r3, r7, #11
 8000286:	2201      	movs	r2, #1
 8000288:	4619      	mov	r1, r3
 800028a:	480f      	ldr	r0, [pc, #60]	; (80002c8 <CmdIDReadAdruino+0xa8>)
 800028c:	f000 fd68 	bl	8000d60 <SPI_SendData>
			SPI_RecieveData(SPI2, (uint8_t *)&Buffer[i], 1);
 8000290:	687a      	ldr	r2, [r7, #4]
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	4413      	add	r3, r2
 8000296:	2201      	movs	r2, #1
 8000298:	4619      	mov	r1, r3
 800029a:	480b      	ldr	r0, [pc, #44]	; (80002c8 <CmdIDReadAdruino+0xa8>)
 800029c:	f000 fd96 	bl	8000dcc <SPI_RecieveData>
		for(i=0; i<len; i++)
 80002a0:	68fb      	ldr	r3, [r7, #12]
 80002a2:	3301      	adds	r3, #1
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	68fa      	ldr	r2, [r7, #12]
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d3e9      	bcc.n	8000282 <CmdIDReadAdruino+0x62>
		}
		Buffer[i] = '\0';
 80002ae:	687a      	ldr	r2, [r7, #4]
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	4413      	add	r3, r2
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]

		return 0xF5;
 80002b8:	23f5      	movs	r3, #245	; 0xf5
 80002ba:	e000      	b.n	80002be <CmdIDReadAdruino+0x9e>
	}
	else
	{
		return 0xA5;
 80002bc:	23a5      	movs	r3, #165	; 0xa5
	}
}
 80002be:	4618      	mov	r0, r3
 80002c0:	3710      	adds	r7, #16
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40003800 	.word	0x40003800

080002cc <CmdPrintAdruino>:

//APi to Print
uint8_t CmdPrintAdruino(char* Buffer, uint32_t len)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
	uint8_t dummy_byte = 0xff;
 80002d6:	23ff      	movs	r3, #255	; 0xff
 80002d8:	72fb      	strb	r3, [r7, #11]
	uint8_t dummy_read = 0xff;
 80002da:	23ff      	movs	r3, #255	; 0xff
 80002dc:	72bb      	strb	r3, [r7, #10]
	uint8_t Cmd = CMD_PRINT;
 80002de:	2353      	movs	r3, #83	; 0x53
 80002e0:	727b      	strb	r3, [r7, #9]
	uint8_t rx_buff = 0x00;
 80002e2:	2300      	movs	r3, #0
 80002e4:	723b      	strb	r3, [r7, #8]

	SPI_SendData(SPI2, &Cmd, 1);
 80002e6:	f107 0309 	add.w	r3, r7, #9
 80002ea:	2201      	movs	r2, #1
 80002ec:	4619      	mov	r1, r3
 80002ee:	4824      	ldr	r0, [pc, #144]	; (8000380 <CmdPrintAdruino+0xb4>)
 80002f0:	f000 fd36 	bl	8000d60 <SPI_SendData>
	//To clear RXNE flag
	SPI_RecieveData(SPI2, &dummy_read, 1);
 80002f4:	f107 030a 	add.w	r3, r7, #10
 80002f8:	2201      	movs	r2, #1
 80002fa:	4619      	mov	r1, r3
 80002fc:	4820      	ldr	r0, [pc, #128]	; (8000380 <CmdPrintAdruino+0xb4>)
 80002fe:	f000 fd65 	bl	8000dcc <SPI_RecieveData>

	//Send dummy byte to start Receive
	SPI_SendData(SPI2, &dummy_byte, 1);
 8000302:	f107 030b 	add.w	r3, r7, #11
 8000306:	2201      	movs	r2, #1
 8000308:	4619      	mov	r1, r3
 800030a:	481d      	ldr	r0, [pc, #116]	; (8000380 <CmdPrintAdruino+0xb4>)
 800030c:	f000 fd28 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &rx_buff, 1);
 8000310:	f107 0308 	add.w	r3, r7, #8
 8000314:	2201      	movs	r2, #1
 8000316:	4619      	mov	r1, r3
 8000318:	4819      	ldr	r0, [pc, #100]	; (8000380 <CmdPrintAdruino+0xb4>)
 800031a:	f000 fd57 	bl	8000dcc <SPI_RecieveData>

	if(rx_buff == 0xF5)
 800031e:	7a3b      	ldrb	r3, [r7, #8]
 8000320:	2bf5      	cmp	r3, #245	; 0xf5
 8000322:	d127      	bne.n	8000374 <CmdPrintAdruino+0xa8>
	{
		//Send Length Information
		SPI_SendData(SPI2, (uint8_t*)&len, 1);
 8000324:	463b      	mov	r3, r7
 8000326:	2201      	movs	r2, #1
 8000328:	4619      	mov	r1, r3
 800032a:	4815      	ldr	r0, [pc, #84]	; (8000380 <CmdPrintAdruino+0xb4>)
 800032c:	f000 fd18 	bl	8000d60 <SPI_SendData>
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000330:	f107 030a 	add.w	r3, r7, #10
 8000334:	2201      	movs	r2, #1
 8000336:	4619      	mov	r1, r3
 8000338:	4811      	ldr	r0, [pc, #68]	; (8000380 <CmdPrintAdruino+0xb4>)
 800033a:	f000 fd47 	bl	8000dcc <SPI_RecieveData>

		for(uint32_t i = 0; i<len; i++)
 800033e:	2300      	movs	r3, #0
 8000340:	60fb      	str	r3, [r7, #12]
 8000342:	e011      	b.n	8000368 <CmdPrintAdruino+0x9c>
		{
			//Send data to print
			SPI_SendData(SPI2, (uint8_t*)&Buffer[i], 1);
 8000344:	687a      	ldr	r2, [r7, #4]
 8000346:	68fb      	ldr	r3, [r7, #12]
 8000348:	4413      	add	r3, r2
 800034a:	2201      	movs	r2, #1
 800034c:	4619      	mov	r1, r3
 800034e:	480c      	ldr	r0, [pc, #48]	; (8000380 <CmdPrintAdruino+0xb4>)
 8000350:	f000 fd06 	bl	8000d60 <SPI_SendData>
			SPI_RecieveData(SPI2, &rx_buff, 1);
 8000354:	f107 0308 	add.w	r3, r7, #8
 8000358:	2201      	movs	r2, #1
 800035a:	4619      	mov	r1, r3
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <CmdPrintAdruino+0xb4>)
 800035e:	f000 fd35 	bl	8000dcc <SPI_RecieveData>
		for(uint32_t i = 0; i<len; i++)
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	68fa      	ldr	r2, [r7, #12]
 800036c:	429a      	cmp	r2, r3
 800036e:	d3e9      	bcc.n	8000344 <CmdPrintAdruino+0x78>
		}

		return 0xF5;
 8000370:	23f5      	movs	r3, #245	; 0xf5
 8000372:	e000      	b.n	8000376 <CmdPrintAdruino+0xaa>
	}
	else
	{
		return 0xA5;
 8000374:	23a5      	movs	r3, #165	; 0xa5
	}
}
 8000376:	4618      	mov	r0, r3
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40003800 	.word	0x40003800

08000384 <CmdLedctrlAdruino>:

//APi to control LED
uint8_t CmdLedctrlAdruino(uint8_t pinNo, uint8_t OnOrOFF)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b084      	sub	sp, #16
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	460a      	mov	r2, r1
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	4613      	mov	r3, r2
 8000392:	71bb      	strb	r3, [r7, #6]
	uint8_t dummy_byte = 0xff;
 8000394:	23ff      	movs	r3, #255	; 0xff
 8000396:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read = 0xff;
 8000398:	23ff      	movs	r3, #255	; 0xff
 800039a:	73bb      	strb	r3, [r7, #14]
	uint8_t Cmd = CMD_LED_CRTL;
 800039c:	2350      	movs	r3, #80	; 0x50
 800039e:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buff = 0x00;
 80003a0:	2300      	movs	r3, #0
 80003a2:	733b      	strb	r3, [r7, #12]

	SPI_SendData(SPI2, &Cmd, 1);
 80003a4:	f107 030d 	add.w	r3, r7, #13
 80003a8:	2201      	movs	r2, #1
 80003aa:	4619      	mov	r1, r3
 80003ac:	481d      	ldr	r0, [pc, #116]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 80003ae:	f000 fcd7 	bl	8000d60 <SPI_SendData>
	//To clear RXNE flag
	SPI_RecieveData(SPI2, &dummy_read, 1);
 80003b2:	f107 030e 	add.w	r3, r7, #14
 80003b6:	2201      	movs	r2, #1
 80003b8:	4619      	mov	r1, r3
 80003ba:	481a      	ldr	r0, [pc, #104]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 80003bc:	f000 fd06 	bl	8000dcc <SPI_RecieveData>

	//Send dummy byte to start Receive
	SPI_SendData(SPI2, &dummy_byte, 1);
 80003c0:	f107 030f 	add.w	r3, r7, #15
 80003c4:	2201      	movs	r2, #1
 80003c6:	4619      	mov	r1, r3
 80003c8:	4816      	ldr	r0, [pc, #88]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 80003ca:	f000 fcc9 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &rx_buff, 1);
 80003ce:	f107 030c 	add.w	r3, r7, #12
 80003d2:	2201      	movs	r2, #1
 80003d4:	4619      	mov	r1, r3
 80003d6:	4813      	ldr	r0, [pc, #76]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 80003d8:	f000 fcf8 	bl	8000dcc <SPI_RecieveData>

	if(rx_buff == 0xF5)
 80003dc:	7b3b      	ldrb	r3, [r7, #12]
 80003de:	2bf5      	cmp	r3, #245	; 0xf5
 80003e0:	d11b      	bne.n	800041a <CmdLedctrlAdruino+0x96>
	{
		//Send pinNo and On/Off command
		SPI_SendData(SPI2, &pinNo, 1);
 80003e2:	1dfb      	adds	r3, r7, #7
 80003e4:	2201      	movs	r2, #1
 80003e6:	4619      	mov	r1, r3
 80003e8:	480e      	ldr	r0, [pc, #56]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 80003ea:	f000 fcb9 	bl	8000d60 <SPI_SendData>
		//To clear RXNE flag
		SPI_RecieveData(SPI2, &dummy_read, 1);
 80003ee:	f107 030e 	add.w	r3, r7, #14
 80003f2:	2201      	movs	r2, #1
 80003f4:	4619      	mov	r1, r3
 80003f6:	480b      	ldr	r0, [pc, #44]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 80003f8:	f000 fce8 	bl	8000dcc <SPI_RecieveData>
		SPI_SendData(SPI2, &OnOrOFF, 1);
 80003fc:	1dbb      	adds	r3, r7, #6
 80003fe:	2201      	movs	r2, #1
 8000400:	4619      	mov	r1, r3
 8000402:	4808      	ldr	r0, [pc, #32]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 8000404:	f000 fcac 	bl	8000d60 <SPI_SendData>
		//To clear RXNE flag
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000408:	f107 030e 	add.w	r3, r7, #14
 800040c:	2201      	movs	r2, #1
 800040e:	4619      	mov	r1, r3
 8000410:	4804      	ldr	r0, [pc, #16]	; (8000424 <CmdLedctrlAdruino+0xa0>)
 8000412:	f000 fcdb 	bl	8000dcc <SPI_RecieveData>
		return 0xF5;
 8000416:	23f5      	movs	r3, #245	; 0xf5
 8000418:	e000      	b.n	800041c <CmdLedctrlAdruino+0x98>
	}
	else
	{
		return 0xA5;
 800041a:	23a5      	movs	r3, #165	; 0xa5
	}
}
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	40003800 	.word	0x40003800

08000428 <CmdReadAnalogAdruino>:

//API to Read analog
uint8_t CmdReadAnalogAdruino(uint8_t pinNo, uint8_t * analog_value)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b084      	sub	sp, #16
 800042c:	af00      	add	r7, sp, #0
 800042e:	4603      	mov	r3, r0
 8000430:	6039      	str	r1, [r7, #0]
 8000432:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_byte = 0xff;
 8000434:	23ff      	movs	r3, #255	; 0xff
 8000436:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read = 0xff;
 8000438:	23ff      	movs	r3, #255	; 0xff
 800043a:	73bb      	strb	r3, [r7, #14]
	uint8_t Cmd = CMD_SENSOR_READ;
 800043c:	2351      	movs	r3, #81	; 0x51
 800043e:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buff = 0x00;
 8000440:	2300      	movs	r3, #0
 8000442:	733b      	strb	r3, [r7, #12]
	SPI_SendData(SPI2, &Cmd, 1);
 8000444:	f107 030d 	add.w	r3, r7, #13
 8000448:	2201      	movs	r2, #1
 800044a:	4619      	mov	r1, r3
 800044c:	4821      	ldr	r0, [pc, #132]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 800044e:	f000 fc87 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &dummy_read, 1);
 8000452:	f107 030e 	add.w	r3, r7, #14
 8000456:	2201      	movs	r2, #1
 8000458:	4619      	mov	r1, r3
 800045a:	481e      	ldr	r0, [pc, #120]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 800045c:	f000 fcb6 	bl	8000dcc <SPI_RecieveData>


	//Send dummy byte to start Receive
	SPI_SendData(SPI2, &dummy_byte, 1);
 8000460:	f107 030f 	add.w	r3, r7, #15
 8000464:	2201      	movs	r2, #1
 8000466:	4619      	mov	r1, r3
 8000468:	481a      	ldr	r0, [pc, #104]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 800046a:	f000 fc79 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &rx_buff, 1);
 800046e:	f107 030c 	add.w	r3, r7, #12
 8000472:	2201      	movs	r2, #1
 8000474:	4619      	mov	r1, r3
 8000476:	4817      	ldr	r0, [pc, #92]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 8000478:	f000 fca8 	bl	8000dcc <SPI_RecieveData>

	if(rx_buff == 0xF5)
 800047c:	7b3b      	ldrb	r3, [r7, #12]
 800047e:	2bf5      	cmp	r3, #245	; 0xf5
 8000480:	d123      	bne.n	80004ca <CmdReadAnalogAdruino+0xa2>
	{
		rx_buff =0x00;
 8000482:	2300      	movs	r3, #0
 8000484:	733b      	strb	r3, [r7, #12]
		//Send pinNo and On/Off command
		SPI_SendData(SPI2, &pinNo, 1);
 8000486:	1dfb      	adds	r3, r7, #7
 8000488:	2201      	movs	r2, #1
 800048a:	4619      	mov	r1, r3
 800048c:	4811      	ldr	r0, [pc, #68]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 800048e:	f000 fc67 	bl	8000d60 <SPI_SendData>
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000492:	f107 030e 	add.w	r3, r7, #14
 8000496:	2201      	movs	r2, #1
 8000498:	4619      	mov	r1, r3
 800049a:	480e      	ldr	r0, [pc, #56]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 800049c:	f000 fc96 	bl	8000dcc <SPI_RecieveData>

		//Insert delay for ADC conversion.
		delay();
 80004a0:	f7ff feaa 	bl	80001f8 <delay>

		//Send dummy byte to start Receive
		SPI_SendData(SPI2, &dummy_byte, 1);
 80004a4:	f107 030f 	add.w	r3, r7, #15
 80004a8:	2201      	movs	r2, #1
 80004aa:	4619      	mov	r1, r3
 80004ac:	4809      	ldr	r0, [pc, #36]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 80004ae:	f000 fc57 	bl	8000d60 <SPI_SendData>
		//Recieve Analog value
		SPI_RecieveData(SPI2, &rx_buff, 1);
 80004b2:	f107 030c 	add.w	r3, r7, #12
 80004b6:	2201      	movs	r2, #1
 80004b8:	4619      	mov	r1, r3
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <CmdReadAnalogAdruino+0xac>)
 80004bc:	f000 fc86 	bl	8000dcc <SPI_RecieveData>

		*analog_value = rx_buff;
 80004c0:	7b3a      	ldrb	r2, [r7, #12]
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	701a      	strb	r2, [r3, #0]
		return 0xF5;
 80004c6:	23f5      	movs	r3, #245	; 0xf5
 80004c8:	e000      	b.n	80004cc <CmdReadAnalogAdruino+0xa4>
	}
	else
	{
		return 0xA5;
 80004ca:	23a5      	movs	r3, #165	; 0xa5
	}
}
 80004cc:	4618      	mov	r0, r3
 80004ce:	3710      	adds	r7, #16
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40003800 	.word	0x40003800

080004d8 <CmdReadLedAdruino>:

//API to Read Led
uint8_t CmdReadLedAdruino(uint8_t pinNo, uint8_t * Led_value)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	6039      	str	r1, [r7, #0]
 80004e2:	71fb      	strb	r3, [r7, #7]
	uint8_t dummy_byte = 0xff;
 80004e4:	23ff      	movs	r3, #255	; 0xff
 80004e6:	73fb      	strb	r3, [r7, #15]
	uint8_t dummy_read = 0xff;
 80004e8:	23ff      	movs	r3, #255	; 0xff
 80004ea:	73bb      	strb	r3, [r7, #14]
	uint8_t Cmd = CMD_LED_READ;
 80004ec:	2352      	movs	r3, #82	; 0x52
 80004ee:	737b      	strb	r3, [r7, #13]
	uint8_t rx_buff = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	733b      	strb	r3, [r7, #12]
	SPI_SendData(SPI2, &Cmd, 1);
 80004f4:	f107 030d 	add.w	r3, r7, #13
 80004f8:	2201      	movs	r2, #1
 80004fa:	4619      	mov	r1, r3
 80004fc:	4821      	ldr	r0, [pc, #132]	; (8000584 <CmdReadLedAdruino+0xac>)
 80004fe:	f000 fc2f 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &dummy_read, 1);
 8000502:	f107 030e 	add.w	r3, r7, #14
 8000506:	2201      	movs	r2, #1
 8000508:	4619      	mov	r1, r3
 800050a:	481e      	ldr	r0, [pc, #120]	; (8000584 <CmdReadLedAdruino+0xac>)
 800050c:	f000 fc5e 	bl	8000dcc <SPI_RecieveData>

	//Send dummy byte to start Receive
	SPI_SendData(SPI2, &dummy_byte, 1);
 8000510:	f107 030f 	add.w	r3, r7, #15
 8000514:	2201      	movs	r2, #1
 8000516:	4619      	mov	r1, r3
 8000518:	481a      	ldr	r0, [pc, #104]	; (8000584 <CmdReadLedAdruino+0xac>)
 800051a:	f000 fc21 	bl	8000d60 <SPI_SendData>
	SPI_RecieveData(SPI2, &rx_buff, 1);
 800051e:	f107 030c 	add.w	r3, r7, #12
 8000522:	2201      	movs	r2, #1
 8000524:	4619      	mov	r1, r3
 8000526:	4817      	ldr	r0, [pc, #92]	; (8000584 <CmdReadLedAdruino+0xac>)
 8000528:	f000 fc50 	bl	8000dcc <SPI_RecieveData>

	if(rx_buff == 0xF5)
 800052c:	7b3b      	ldrb	r3, [r7, #12]
 800052e:	2bf5      	cmp	r3, #245	; 0xf5
 8000530:	d123      	bne.n	800057a <CmdReadLedAdruino+0xa2>
	{
		rx_buff =0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	733b      	strb	r3, [r7, #12]
		//Send pinNo and On/Off command
		SPI_SendData(SPI2, &pinNo, 1);
 8000536:	1dfb      	adds	r3, r7, #7
 8000538:	2201      	movs	r2, #1
 800053a:	4619      	mov	r1, r3
 800053c:	4811      	ldr	r0, [pc, #68]	; (8000584 <CmdReadLedAdruino+0xac>)
 800053e:	f000 fc0f 	bl	8000d60 <SPI_SendData>
		SPI_RecieveData(SPI2, &dummy_read, 1);
 8000542:	f107 030e 	add.w	r3, r7, #14
 8000546:	2201      	movs	r2, #1
 8000548:	4619      	mov	r1, r3
 800054a:	480e      	ldr	r0, [pc, #56]	; (8000584 <CmdReadLedAdruino+0xac>)
 800054c:	f000 fc3e 	bl	8000dcc <SPI_RecieveData>

		//Insert delay for ADC conversion.
		delay();
 8000550:	f7ff fe52 	bl	80001f8 <delay>

		//Send dummy byte to start Receive
		SPI_SendData(SPI2, &dummy_byte, 1);
 8000554:	f107 030f 	add.w	r3, r7, #15
 8000558:	2201      	movs	r2, #1
 800055a:	4619      	mov	r1, r3
 800055c:	4809      	ldr	r0, [pc, #36]	; (8000584 <CmdReadLedAdruino+0xac>)
 800055e:	f000 fbff 	bl	8000d60 <SPI_SendData>
		//Recieve Analog value
		SPI_RecieveData(SPI2, &rx_buff, 1);
 8000562:	f107 030c 	add.w	r3, r7, #12
 8000566:	2201      	movs	r2, #1
 8000568:	4619      	mov	r1, r3
 800056a:	4806      	ldr	r0, [pc, #24]	; (8000584 <CmdReadLedAdruino+0xac>)
 800056c:	f000 fc2e 	bl	8000dcc <SPI_RecieveData>

		*Led_value = rx_buff;
 8000570:	7b3a      	ldrb	r2, [r7, #12]
 8000572:	683b      	ldr	r3, [r7, #0]
 8000574:	701a      	strb	r2, [r3, #0]
		return 0xF5;
 8000576:	23f5      	movs	r3, #245	; 0xf5
 8000578:	e000      	b.n	800057c <CmdReadLedAdruino+0xa4>
	}
	else
	{
		return 0xA5;
 800057a:	23a5      	movs	r3, #165	; 0xa5
	}
}
 800057c:	4618      	mov	r0, r3
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	40003800 	.word	0x40003800

08000588 <GPIO_ButtonCfg>:

void GPIO_ButtonCfg()
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
	GPIO_handle_tst GPIO_Button;

	GPIO_Button.GPIOx_pst = GPIOA;
 800058e:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <GPIO_ButtonCfg+0x34>)
 8000590:	607b      	str	r3, [r7, #4]
	GPIO_Button.GPIO_pinCfg_st.GPIO_pinNo = GPIO_PIN0;
 8000592:	2300      	movs	r3, #0
 8000594:	723b      	strb	r3, [r7, #8]
	GPIO_Button.GPIO_pinCfg_st.GPIO_PinMode = GPIO_MODE_IN;
 8000596:	2300      	movs	r3, #0
 8000598:	727b      	strb	r3, [r7, #9]
	GPIO_Button.GPIO_pinCfg_st.GPIO_PinOutSpeed = GPIO_OUTSPEED_HIGH;
 800059a:	2302      	movs	r3, #2
 800059c:	72bb      	strb	r3, [r7, #10]
	GPIO_Button.GPIO_pinCfg_st.GPIO_PinpupdControl = GPIO_PUPD_NONE;
 800059e:	2300      	movs	r3, #0
 80005a0:	72fb      	strb	r3, [r7, #11]

	GPIO_PheripheralClockCfg(GPIO_PORTA, ENABLE);
 80005a2:	2101      	movs	r1, #1
 80005a4:	2000      	movs	r0, #0
 80005a6:	f000 f911 	bl	80007cc <GPIO_PheripheralClockCfg>

	GPIO_init(&GPIO_Button);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f935 	bl	800081c <GPIO_init>
}
 80005b2:	bf00      	nop
 80005b4:	3710      	adds	r7, #16
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	40020000 	.word	0x40020000

080005c0 <SPI2_PinCfg>:
 * PB13     SCLK
 * PB14     MISO
 * PB15     MOSI
 */
void SPI2_PinCfg(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
	GPIO_handle_tst SPI2_Pinshandle;
	memset(&SPI2_Pinshandle,0,sizeof(SPI2_Pinshandle));
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	220c      	movs	r2, #12
 80005ca:	2100      	movs	r1, #0
 80005cc:	4618      	mov	r0, r3
 80005ce:	f000 fc9d 	bl	8000f0c <memset>
	SPI2_Pinshandle.GPIOx_pst = GPIOB;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <SPI2_PinCfg+0x6c>)
 80005d4:	607b      	str	r3, [r7, #4]

	//Enable GPIO B Peripheral
	GPIO_PheripheralClockCfg(GPIO_PORTB, ENABLE);
 80005d6:	2101      	movs	r1, #1
 80005d8:	2001      	movs	r0, #1
 80005da:	f000 f8f7 	bl	80007cc <GPIO_PheripheralClockCfg>

	//SCLK
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_pinNo = GPIO_PIN13;
 80005de:	230d      	movs	r3, #13
 80005e0:	723b      	strb	r3, [r7, #8]
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_PinMode = GPIO_MODE_ALT_FNC;
 80005e2:	2302      	movs	r3, #2
 80005e4:	727b      	strb	r3, [r7, #9]
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_PinOutSpeed = GPIO_OUTSPEED_HIGH;
 80005e6:	2302      	movs	r3, #2
 80005e8:	72bb      	strb	r3, [r7, #10]
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_PinOutType = GPIO_OTYPE_PUSHPULL;
 80005ea:	2300      	movs	r3, #0
 80005ec:	733b      	strb	r3, [r7, #12]
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_PinpupdControl = GPIO_PUPD_PU;
 80005ee:	2301      	movs	r3, #1
 80005f0:	72fb      	strb	r3, [r7, #11]
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_PinAltFncMode = 5;
 80005f2:	2305      	movs	r3, #5
 80005f4:	737b      	strb	r3, [r7, #13]
	GPIO_init(&SPI2_Pinshandle);
 80005f6:	1d3b      	adds	r3, r7, #4
 80005f8:	4618      	mov	r0, r3
 80005fa:	f000 f90f 	bl	800081c <GPIO_init>

	//MISO
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_pinNo = GPIO_PIN14;
 80005fe:	230e      	movs	r3, #14
 8000600:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPI2_Pinshandle);
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f909 	bl	800081c <GPIO_init>

	//MOSI
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_pinNo = GPIO_PIN15;
 800060a:	230f      	movs	r3, #15
 800060c:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPI2_Pinshandle);
 800060e:	1d3b      	adds	r3, r7, #4
 8000610:	4618      	mov	r0, r3
 8000612:	f000 f903 	bl	800081c <GPIO_init>

	//NSS
	SPI2_Pinshandle.GPIO_pinCfg_st.GPIO_pinNo = GPIO_PIN12;
 8000616:	230c      	movs	r3, #12
 8000618:	723b      	strb	r3, [r7, #8]
	GPIO_init(&SPI2_Pinshandle);
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	4618      	mov	r0, r3
 800061e:	f000 f8fd 	bl	800081c <GPIO_init>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	40020400 	.word	0x40020400

08000630 <SPI2_InitConfig>:

/*
 * SPI Peripheral Initialization
 */
void SPI2_InitConfig(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b086      	sub	sp, #24
 8000634:	af00      	add	r7, sp, #0
	SPI_handle_tst SPI2_handle;

	SPI2_handle.SPIx_pst = SPI2;
 8000636:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <SPI2_InitConfig+0x38>)
 8000638:	603b      	str	r3, [r7, #0]

	SPI2_handle.SPI_Config_tst.SPI_DeviceMode = SPI_DEVMODE_MASTER;
 800063a:	2301      	movs	r3, #1
 800063c:	713b      	strb	r3, [r7, #4]
	SPI2_handle.SPI_Config_tst.SPI_CPHA = SPI_CPHA_LOW;
 800063e:	2300      	movs	r3, #0
 8000640:	723b      	strb	r3, [r7, #8]
	SPI2_handle.SPI_Config_tst.SPI_CPOL = SPI_CPOL_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
	SPI2_handle.SPI_Config_tst.SPI_BaudRate = SPI_CLKSPD_DIV8;    //2Mz SCLK
 8000646:	2302      	movs	r3, #2
 8000648:	717b      	strb	r3, [r7, #5]
	SPI2_handle.SPI_Config_tst.SPI_BusConfig = SPI_BUSCFG_FULLDUPLEX;
 800064a:	2300      	movs	r3, #0
 800064c:	71bb      	strb	r3, [r7, #6]
	SPI2_handle.SPI_Config_tst.SPI_DFF = SPI_DFF_8BITS;
 800064e:	2300      	movs	r3, #0
 8000650:	727b      	strb	r3, [r7, #9]
	//NSS pin to VCC for single master mode
	SPI2_handle.SPI_Config_tst.SPI_SSM = SPI_SSM_DIS;   //software Slave management disable since NSS is connected
 8000652:	2300      	movs	r3, #0
 8000654:	72bb      	strb	r3, [r7, #10]

	SPI_init(&SPI2_handle);
 8000656:	463b      	mov	r3, r7
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fb19 	bl	8000c90 <SPI_init>

}
 800065e:	bf00      	nop
 8000660:	3718      	adds	r7, #24
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40003800 	.word	0x40003800

0800066c <main>:

int main(void)
{
 800066c:	b5b0      	push	{r4, r5, r7, lr}
 800066e:	b090      	sub	sp, #64	; 0x40
 8000670:	af00      	add	r7, sp, #0
	//Configure Port A 0pin for Button
	GPIO_ButtonCfg();
 8000672:	f7ff ff89 	bl	8000588 <GPIO_ButtonCfg>

	/*SPI config*/
	SPI2_PinCfg();
 8000676:	f7ff ffa3 	bl	80005c0 <SPI2_PinCfg>
	SPI2_InitConfig();
 800067a:	f7ff ffd9 	bl	8000630 <SPI2_InitConfig>
	while(1)
	{
		/*
		 * LED set
		 */
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 800067e:	bf00      	nop
 8000680:	2100      	movs	r1, #0
 8000682:	483a      	ldr	r0, [pc, #232]	; (800076c <main+0x100>)
 8000684:	f000 fa7e 	bl	8000b84 <GPIO_ReadInputPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f8      	beq.n	8000680 <main+0x14>
		delay();
 800068e:	f7ff fdb3 	bl	80001f8 <delay>
		/*
		 * Make SSOE to 1 since NSS pin is controlled as per SPE
		 */
		SPI_SSOEControl(SPI2, ENABLE);
 8000692:	2101      	movs	r1, #1
 8000694:	4836      	ldr	r0, [pc, #216]	; (8000770 <main+0x104>)
 8000696:	f000 fbf9 	bl	8000e8c <SPI_SSOEControl>

		/*Enable SPI2 module*/
		SPI_PeripheralEnable(SPI2, ENABLE);
 800069a:	2101      	movs	r1, #1
 800069c:	4834      	ldr	r0, [pc, #208]	; (8000770 <main+0x104>)
 800069e:	f000 fbcb 	bl	8000e38 <SPI_PeripheralEnable>

		//1. CMD_LED_CTRL <pin no(1)> <value no(1)>
		CmdLedctrlAdruino(9,1);
 80006a2:	2101      	movs	r1, #1
 80006a4:	2009      	movs	r0, #9
 80006a6:	f7ff fe6d 	bl	8000384 <CmdLedctrlAdruino>

		/*
		 * Analog set
		 */
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 80006aa:	bf00      	nop
 80006ac:	2100      	movs	r1, #0
 80006ae:	482f      	ldr	r0, [pc, #188]	; (800076c <main+0x100>)
 80006b0:	f000 fa68 	bl	8000b84 <GPIO_ReadInputPin>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d0f8      	beq.n	80006ac <main+0x40>
		delay();
 80006ba:	f7ff fd9d 	bl	80001f8 <delay>
		//Analog Pin 0
		uint8_t analog_read;
		CmdReadAnalogAdruino(0, &analog_read);
 80006be:	f107 033f 	add.w	r3, r7, #63	; 0x3f
 80006c2:	4619      	mov	r1, r3
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff feaf 	bl	8000428 <CmdReadAnalogAdruino>

		/*
		 * Led Pin 9 read
		 */
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 80006ca:	bf00      	nop
 80006cc:	2100      	movs	r1, #0
 80006ce:	4827      	ldr	r0, [pc, #156]	; (800076c <main+0x100>)
 80006d0:	f000 fa58 	bl	8000b84 <GPIO_ReadInputPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0f8      	beq.n	80006cc <main+0x60>
		delay();
 80006da:	f7ff fd8d 	bl	80001f8 <delay>
		//Led Pin 9
		uint8_t Led_read;
		CmdReadLedAdruino(0, &Led_read);
 80006de:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 80006e2:	4619      	mov	r1, r3
 80006e4:	2000      	movs	r0, #0
 80006e6:	f7ff fef7 	bl	80004d8 <CmdReadLedAdruino>

		/*
		 *Print data
		 */
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 80006ea:	bf00      	nop
 80006ec:	2100      	movs	r1, #0
 80006ee:	481f      	ldr	r0, [pc, #124]	; (800076c <main+0x100>)
 80006f0:	f000 fa48 	bl	8000b84 <GPIO_ReadInputPin>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d0f8      	beq.n	80006ec <main+0x80>
		delay();
 80006fa:	f7ff fd7d 	bl	80001f8 <delay>

		char printbuffer[] = "Welcome to motoring twins channel";
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <main+0x108>)
 8000700:	1d3c      	adds	r4, r7, #4
 8000702:	461d      	mov	r5, r3
 8000704:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000706:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800070a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800070c:	682b      	ldr	r3, [r5, #0]
 800070e:	8023      	strh	r3, [r4, #0]
		CmdPrintAdruino(printbuffer,strlen(printbuffer));
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff fd68 	bl	80001e8 <strlen>
 8000718:	4602      	mov	r2, r0
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	4611      	mov	r1, r2
 800071e:	4618      	mov	r0, r3
 8000720:	f7ff fdd4 	bl	80002cc <CmdPrintAdruino>

		/*
		 * CMD ID Read
		 */
		while(!GPIO_ReadInputPin(GPIOA, GPIO_PIN0));
 8000724:	bf00      	nop
 8000726:	2100      	movs	r1, #0
 8000728:	4810      	ldr	r0, [pc, #64]	; (800076c <main+0x100>)
 800072a:	f000 fa2b 	bl	8000b84 <GPIO_ReadInputPin>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d0f8      	beq.n	8000726 <main+0xba>
		delay();
 8000734:	f7ff fd60 	bl	80001f8 <delay>

		char ID_Buffer[20] = {0};
 8000738:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
		CmdIDReadAdruino(ID_Buffer,10);
 8000748:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800074c:	210a      	movs	r1, #10
 800074e:	4618      	mov	r0, r3
 8000750:	f7ff fd66 	bl	8000220 <CmdIDReadAdruino>

		//lets confirm SPI is not busy
		while(SPI_GetBusyFlagStatus(SPI2));
 8000754:	bf00      	nop
 8000756:	4806      	ldr	r0, [pc, #24]	; (8000770 <main+0x104>)
 8000758:	f000 fb89 	bl	8000e6e <SPI_GetBusyFlagStatus>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d1f9      	bne.n	8000756 <main+0xea>

		//Disable the SPI2 peripheral
		SPI_PeripheralEnable(SPI2,DISABLE);
 8000762:	2100      	movs	r1, #0
 8000764:	4802      	ldr	r0, [pc, #8]	; (8000770 <main+0x104>)
 8000766:	f000 fb67 	bl	8000e38 <SPI_PeripheralEnable>
	{
 800076a:	e788      	b.n	800067e <main+0x12>
 800076c:	40020000 	.word	0x40020000
 8000770:	40003800 	.word	0x40003800
 8000774:	08000f34 	.word	0x08000f34

08000778 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000778:	480d      	ldr	r0, [pc, #52]	; (80007b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800077a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800077c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000780:	480c      	ldr	r0, [pc, #48]	; (80007b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000782:	490d      	ldr	r1, [pc, #52]	; (80007b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000784:	4a0d      	ldr	r2, [pc, #52]	; (80007bc <LoopForever+0xe>)
  movs r3, #0
 8000786:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000788:	e002      	b.n	8000790 <LoopCopyDataInit>

0800078a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800078c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800078e:	3304      	adds	r3, #4

08000790 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000790:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000792:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000794:	d3f9      	bcc.n	800078a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000798:	4c0a      	ldr	r4, [pc, #40]	; (80007c4 <LoopForever+0x16>)
  movs r3, #0
 800079a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800079c:	e001      	b.n	80007a2 <LoopFillZerobss>

0800079e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800079e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a0:	3204      	adds	r2, #4

080007a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a4:	d3fb      	bcc.n	800079e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80007a6:	f000 fb8d 	bl	8000ec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007aa:	f7ff ff5f 	bl	800066c <main>

080007ae <LoopForever>:

LoopForever:
    b LoopForever
 80007ae:	e7fe      	b.n	80007ae <LoopForever>
  ldr   r0, =_estack
 80007b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007b8:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80007bc:	08000f60 	.word	0x08000f60
  ldr r2, =_sbss
 80007c0:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80007c4:	2000001c 	.word	0x2000001c

080007c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007c8:	e7fe      	b.n	80007c8 <ADC_IRQHandler>
	...

080007cc <GPIO_PheripheralClockCfg>:

/*
 * GPIO Peripheral clockCfg API
 */
void GPIO_PheripheralClockCfg(uint8_t PORT, uint8_t EnOrDis)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b083      	sub	sp, #12
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	460a      	mov	r2, r1
 80007d6:	71fb      	strb	r3, [r7, #7]
 80007d8:	4613      	mov	r3, r2
 80007da:	71bb      	strb	r3, [r7, #6]
	if(ENABLE == EnOrDis)
 80007dc:	79bb      	ldrb	r3, [r7, #6]
 80007de:	2b01      	cmp	r3, #1
 80007e0:	d10a      	bne.n	80007f8 <GPIO_PheripheralClockCfg+0x2c>
	{
		GPIOPORTx_CLK_EN(PORT);
 80007e2:	4b0d      	ldr	r3, [pc, #52]	; (8000818 <GPIO_PheripheralClockCfg+0x4c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	79fa      	ldrb	r2, [r7, #7]
 80007e8:	2101      	movs	r1, #1
 80007ea:	fa01 f202 	lsl.w	r2, r1, r2
 80007ee:	4611      	mov	r1, r2
 80007f0:	4a09      	ldr	r2, [pc, #36]	; (8000818 <GPIO_PheripheralClockCfg+0x4c>)
 80007f2:	430b      	orrs	r3, r1
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
	}
	else
	{
		GPIOPORTx_CLK_DI(PORT);
	}
}
 80007f6:	e00a      	b.n	800080e <GPIO_PheripheralClockCfg+0x42>
		GPIOPORTx_CLK_DI(PORT);
 80007f8:	4b07      	ldr	r3, [pc, #28]	; (8000818 <GPIO_PheripheralClockCfg+0x4c>)
 80007fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fc:	79fa      	ldrb	r2, [r7, #7]
 80007fe:	2101      	movs	r1, #1
 8000800:	fa01 f202 	lsl.w	r2, r1, r2
 8000804:	43d2      	mvns	r2, r2
 8000806:	4611      	mov	r1, r2
 8000808:	4a03      	ldr	r2, [pc, #12]	; (8000818 <GPIO_PheripheralClockCfg+0x4c>)
 800080a:	400b      	ands	r3, r1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800080e:	bf00      	nop
 8000810:	370c      	adds	r7, #12
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	40023800 	.word	0x40023800

0800081c <GPIO_init>:

/*
 * GPIO Peripheral Initialization and De-initialization
 */
void GPIO_init(GPIO_handle_tst * handle_pst)
{
 800081c:	b480      	push	{r7}
 800081e:	b089      	sub	sp, #36	; 0x24
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	uint32_t tempRegValue = 0U;
 8000824:	2300      	movs	r3, #0
 8000826:	61fb      	str	r3, [r7, #28]

	/*Clock enable*/
	//GPIO_PheripheralClockCfg(handle_pst->GPIOx_pst, ENABLE);
	/*Configure mode of GPIO pin*/
	if(handle_pst->GPIO_pinCfg_st.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	795b      	ldrb	r3, [r3, #5]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d822      	bhi.n	8000876 <GPIO_init+0x5a>
	{
		tempRegValue = (handle_pst->GPIO_pinCfg_st.GPIO_PinMode << (2 * handle_pst->GPIO_pinCfg_st.GPIO_pinNo));
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	795b      	ldrb	r3, [r3, #5]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	791b      	ldrb	r3, [r3, #4]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	61fb      	str	r3, [r7, #28]
		handle_pst->GPIOx_pst->MODER &= ~(0x3 << (2 * handle_pst->GPIO_pinCfg_st.GPIO_pinNo));  //clearing
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	791b      	ldrb	r3, [r3, #4]
 800084c:	005b      	lsls	r3, r3, #1
 800084e:	2103      	movs	r1, #3
 8000850:	fa01 f303 	lsl.w	r3, r1, r3
 8000854:	43db      	mvns	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	400a      	ands	r2, r1
 800085e:	601a      	str	r2, [r3, #0]
		handle_pst->GPIOx_pst->MODER |= tempRegValue;										//setting
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	6819      	ldr	r1, [r3, #0]
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	69fa      	ldr	r2, [r7, #28]
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
		tempRegValue = 0U;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
 8000874:	e0e1      	b.n	8000a3a <GPIO_init+0x21e>
	}
	else
	{
		//Interrupt mode
		if(handle_pst->GPIO_pinCfg_st.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	795b      	ldrb	r3, [r3, #5]
 800087a:	2b04      	cmp	r3, #4
 800087c:	d117      	bne.n	80008ae <GPIO_init+0x92>
		{
			/*Configure for edge trigger falling edge*/
			EXTI->FTSR |= (1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 800087e:	4b53      	ldr	r3, [pc, #332]	; (80009cc <GPIO_init+0x1b0>)
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	687a      	ldr	r2, [r7, #4]
 8000884:	7912      	ldrb	r2, [r2, #4]
 8000886:	4611      	mov	r1, r2
 8000888:	2201      	movs	r2, #1
 800088a:	408a      	lsls	r2, r1
 800088c:	4611      	mov	r1, r2
 800088e:	4a4f      	ldr	r2, [pc, #316]	; (80009cc <GPIO_init+0x1b0>)
 8000890:	430b      	orrs	r3, r1
 8000892:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 8000894:	4b4d      	ldr	r3, [pc, #308]	; (80009cc <GPIO_init+0x1b0>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	687a      	ldr	r2, [r7, #4]
 800089a:	7912      	ldrb	r2, [r2, #4]
 800089c:	4611      	mov	r1, r2
 800089e:	2201      	movs	r2, #1
 80008a0:	408a      	lsls	r2, r1
 80008a2:	43d2      	mvns	r2, r2
 80008a4:	4611      	mov	r1, r2
 80008a6:	4a49      	ldr	r2, [pc, #292]	; (80009cc <GPIO_init+0x1b0>)
 80008a8:	400b      	ands	r3, r1
 80008aa:	6093      	str	r3, [r2, #8]
 80008ac:	e031      	b.n	8000912 <GPIO_init+0xf6>

		}
		else if (handle_pst->GPIO_pinCfg_st.GPIO_PinMode == GPIO_MODE_IT_RT)
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2b05      	cmp	r3, #5
 80008b4:	d117      	bne.n	80008e6 <GPIO_init+0xca>
		{
			/*Configure for edge trigger raising edge*/
			EXTI->RTSR |= (1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <GPIO_init+0x1b0>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	7912      	ldrb	r2, [r2, #4]
 80008be:	4611      	mov	r1, r2
 80008c0:	2201      	movs	r2, #1
 80008c2:	408a      	lsls	r2, r1
 80008c4:	4611      	mov	r1, r2
 80008c6:	4a41      	ldr	r2, [pc, #260]	; (80009cc <GPIO_init+0x1b0>)
 80008c8:	430b      	orrs	r3, r1
 80008ca:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 80008cc:	4b3f      	ldr	r3, [pc, #252]	; (80009cc <GPIO_init+0x1b0>)
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	687a      	ldr	r2, [r7, #4]
 80008d2:	7912      	ldrb	r2, [r2, #4]
 80008d4:	4611      	mov	r1, r2
 80008d6:	2201      	movs	r2, #1
 80008d8:	408a      	lsls	r2, r1
 80008da:	43d2      	mvns	r2, r2
 80008dc:	4611      	mov	r1, r2
 80008de:	4a3b      	ldr	r2, [pc, #236]	; (80009cc <GPIO_init+0x1b0>)
 80008e0:	400b      	ands	r3, r1
 80008e2:	60d3      	str	r3, [r2, #12]
 80008e4:	e015      	b.n	8000912 <GPIO_init+0xf6>
		}
		else
		{
			/*Configure for edge trigger falling raising edge*/
			EXTI->FTSR |= (1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 80008e6:	4b39      	ldr	r3, [pc, #228]	; (80009cc <GPIO_init+0x1b0>)
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	7912      	ldrb	r2, [r2, #4]
 80008ee:	4611      	mov	r1, r2
 80008f0:	2201      	movs	r2, #1
 80008f2:	408a      	lsls	r2, r1
 80008f4:	4611      	mov	r1, r2
 80008f6:	4a35      	ldr	r2, [pc, #212]	; (80009cc <GPIO_init+0x1b0>)
 80008f8:	430b      	orrs	r3, r1
 80008fa:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 80008fc:	4b33      	ldr	r3, [pc, #204]	; (80009cc <GPIO_init+0x1b0>)
 80008fe:	689b      	ldr	r3, [r3, #8]
 8000900:	687a      	ldr	r2, [r7, #4]
 8000902:	7912      	ldrb	r2, [r2, #4]
 8000904:	4611      	mov	r1, r2
 8000906:	2201      	movs	r2, #1
 8000908:	408a      	lsls	r2, r1
 800090a:	4611      	mov	r1, r2
 800090c:	4a2f      	ldr	r2, [pc, #188]	; (80009cc <GPIO_init+0x1b0>)
 800090e:	430b      	orrs	r3, r1
 8000910:	6093      	str	r3, [r2, #8]
		}

		SYSCFG_CLK_EN();
 8000912:	4b2f      	ldr	r3, [pc, #188]	; (80009d0 <GPIO_init+0x1b4>)
 8000914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000916:	4a2e      	ldr	r2, [pc, #184]	; (80009d0 <GPIO_init+0x1b4>)
 8000918:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800091c:	6453      	str	r3, [r2, #68]	; 0x44
		uint32_t tempReg1 = handle_pst->GPIO_pinCfg_st.GPIO_pinNo/4;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	791b      	ldrb	r3, [r3, #4]
 8000922:	089b      	lsrs	r3, r3, #2
 8000924:	b2db      	uxtb	r3, r3
 8000926:	61bb      	str	r3, [r7, #24]
		uint32_t tempReg2 = handle_pst->GPIO_pinCfg_st.GPIO_pinNo%4;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	f003 0303 	and.w	r3, r3, #3
 8000930:	617b      	str	r3, [r7, #20]
		uint8_t portNumber = GPIO_GETPORTNUMBER(handle_pst->GPIOx_pst);
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a27      	ldr	r2, [pc, #156]	; (80009d4 <GPIO_init+0x1b8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d061      	beq.n	8000a00 <GPIO_init+0x1e4>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a25      	ldr	r2, [pc, #148]	; (80009d8 <GPIO_init+0x1bc>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d040      	beq.n	80009c8 <GPIO_init+0x1ac>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a24      	ldr	r2, [pc, #144]	; (80009dc <GPIO_init+0x1c0>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d039      	beq.n	80009c4 <GPIO_init+0x1a8>
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a22      	ldr	r2, [pc, #136]	; (80009e0 <GPIO_init+0x1c4>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d032      	beq.n	80009c0 <GPIO_init+0x1a4>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a21      	ldr	r2, [pc, #132]	; (80009e4 <GPIO_init+0x1c8>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d02b      	beq.n	80009bc <GPIO_init+0x1a0>
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a1f      	ldr	r2, [pc, #124]	; (80009e8 <GPIO_init+0x1cc>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d024      	beq.n	80009b8 <GPIO_init+0x19c>
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	4a1e      	ldr	r2, [pc, #120]	; (80009ec <GPIO_init+0x1d0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d01d      	beq.n	80009b4 <GPIO_init+0x198>
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a1c      	ldr	r2, [pc, #112]	; (80009f0 <GPIO_init+0x1d4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d016      	beq.n	80009b0 <GPIO_init+0x194>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	4a1b      	ldr	r2, [pc, #108]	; (80009f4 <GPIO_init+0x1d8>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d00f      	beq.n	80009ac <GPIO_init+0x190>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a19      	ldr	r2, [pc, #100]	; (80009f8 <GPIO_init+0x1dc>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d008      	beq.n	80009a8 <GPIO_init+0x18c>
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a18      	ldr	r2, [pc, #96]	; (80009fc <GPIO_init+0x1e0>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d101      	bne.n	80009a4 <GPIO_init+0x188>
 80009a0:	2309      	movs	r3, #9
 80009a2:	e02e      	b.n	8000a02 <GPIO_init+0x1e6>
 80009a4:	2300      	movs	r3, #0
 80009a6:	e02c      	b.n	8000a02 <GPIO_init+0x1e6>
 80009a8:	2308      	movs	r3, #8
 80009aa:	e02a      	b.n	8000a02 <GPIO_init+0x1e6>
 80009ac:	2307      	movs	r3, #7
 80009ae:	e028      	b.n	8000a02 <GPIO_init+0x1e6>
 80009b0:	2306      	movs	r3, #6
 80009b2:	e026      	b.n	8000a02 <GPIO_init+0x1e6>
 80009b4:	2305      	movs	r3, #5
 80009b6:	e024      	b.n	8000a02 <GPIO_init+0x1e6>
 80009b8:	2305      	movs	r3, #5
 80009ba:	e022      	b.n	8000a02 <GPIO_init+0x1e6>
 80009bc:	2304      	movs	r3, #4
 80009be:	e020      	b.n	8000a02 <GPIO_init+0x1e6>
 80009c0:	2303      	movs	r3, #3
 80009c2:	e01e      	b.n	8000a02 <GPIO_init+0x1e6>
 80009c4:	2302      	movs	r3, #2
 80009c6:	e01c      	b.n	8000a02 <GPIO_init+0x1e6>
 80009c8:	2301      	movs	r3, #1
 80009ca:	e01a      	b.n	8000a02 <GPIO_init+0x1e6>
 80009cc:	40013c00 	.word	0x40013c00
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40020000 	.word	0x40020000
 80009d8:	40020400 	.word	0x40020400
 80009dc:	40020800 	.word	0x40020800
 80009e0:	40020c00 	.word	0x40020c00
 80009e4:	40021000 	.word	0x40021000
 80009e8:	40021400 	.word	0x40021400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40021c00 	.word	0x40021c00
 80009f4:	40022000 	.word	0x40022000
 80009f8:	40022400 	.word	0x40022400
 80009fc:	40022800 	.word	0x40022800
 8000a00:	2300      	movs	r3, #0
 8000a02:	74fb      	strb	r3, [r7, #19]
		SYSCFG->EXTICR[tempReg1] |= (portNumber << (4 * tempReg2));
 8000a04:	4a5d      	ldr	r2, [pc, #372]	; (8000b7c <GPIO_init+0x360>)
 8000a06:	69bb      	ldr	r3, [r7, #24]
 8000a08:	3302      	adds	r3, #2
 8000a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a0e:	7cf9      	ldrb	r1, [r7, #19]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	0092      	lsls	r2, r2, #2
 8000a14:	fa01 f202 	lsl.w	r2, r1, r2
 8000a18:	4958      	ldr	r1, [pc, #352]	; (8000b7c <GPIO_init+0x360>)
 8000a1a:	431a      	orrs	r2, r3
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	3302      	adds	r3, #2
 8000a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		/*Enable Interrupt delivery*/
		EXTI->IMR |= (1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 8000a24:	4b56      	ldr	r3, [pc, #344]	; (8000b80 <GPIO_init+0x364>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	687a      	ldr	r2, [r7, #4]
 8000a2a:	7912      	ldrb	r2, [r2, #4]
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	2201      	movs	r2, #1
 8000a30:	408a      	lsls	r2, r1
 8000a32:	4611      	mov	r1, r2
 8000a34:	4a52      	ldr	r2, [pc, #328]	; (8000b80 <GPIO_init+0x364>)
 8000a36:	430b      	orrs	r3, r1
 8000a38:	6013      	str	r3, [r2, #0]
	}

	/*Configure Output type*/

	tempRegValue = (handle_pst->GPIO_pinCfg_st.GPIO_PinOutType << (handle_pst->GPIO_pinCfg_st.GPIO_pinNo));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	7a1b      	ldrb	r3, [r3, #8]
 8000a3e:	461a      	mov	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	791b      	ldrb	r3, [r3, #4]
 8000a44:	fa02 f303 	lsl.w	r3, r2, r3
 8000a48:	61fb      	str	r3, [r7, #28]
	handle_pst->GPIOx_pst->OTYPER &= ~(0x1 << handle_pst->GPIO_pinCfg_st.GPIO_pinNo);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	685a      	ldr	r2, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	791b      	ldrb	r3, [r3, #4]
 8000a54:	4619      	mov	r1, r3
 8000a56:	2301      	movs	r3, #1
 8000a58:	408b      	lsls	r3, r1
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	400a      	ands	r2, r1
 8000a64:	605a      	str	r2, [r3, #4]
	handle_pst->GPIOx_pst->OTYPER |= tempRegValue;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	6859      	ldr	r1, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	430a      	orrs	r2, r1
 8000a74:	605a      	str	r2, [r3, #4]
	tempRegValue = 0U;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]

	/*Configure the speed of GPIO pin*/

	tempRegValue = (handle_pst->GPIO_pinCfg_st.GPIO_PinOutSpeed << (2 *handle_pst->GPIO_pinCfg_st.GPIO_pinNo));
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	799b      	ldrb	r3, [r3, #6]
 8000a7e:	461a      	mov	r2, r3
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	791b      	ldrb	r3, [r3, #4]
 8000a84:	005b      	lsls	r3, r3, #1
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	61fb      	str	r3, [r7, #28]
	handle_pst->GPIOx_pst->OSPEEDR &= ~(0x3 << (2 * handle_pst->GPIO_pinCfg_st.GPIO_pinNo));
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	689a      	ldr	r2, [r3, #8]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	791b      	ldrb	r3, [r3, #4]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2103      	movs	r1, #3
 8000a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	400a      	ands	r2, r1
 8000aa8:	609a      	str	r2, [r3, #8]
	handle_pst->GPIOx_pst->OSPEEDR |= tempRegValue;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6899      	ldr	r1, [r3, #8]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	69fa      	ldr	r2, [r7, #28]
 8000ab6:	430a      	orrs	r2, r1
 8000ab8:	609a      	str	r2, [r3, #8]
	tempRegValue = 0U;
 8000aba:	2300      	movs	r3, #0
 8000abc:	61fb      	str	r3, [r7, #28]

	/*Configure pull up pull down*/
	tempRegValue = (handle_pst->GPIO_pinCfg_st.GPIO_PinpupdControl << (2 *handle_pst->GPIO_pinCfg_st.GPIO_pinNo));
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	79db      	ldrb	r3, [r3, #7]
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ace:	61fb      	str	r3, [r7, #28]
	handle_pst->GPIOx_pst->PUPDR &= ~(0x3 << (2 * handle_pst->GPIO_pinCfg_st.GPIO_pinNo));
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	68da      	ldr	r2, [r3, #12]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	791b      	ldrb	r3, [r3, #4]
 8000ada:	005b      	lsls	r3, r3, #1
 8000adc:	2103      	movs	r1, #3
 8000ade:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	400a      	ands	r2, r1
 8000aec:	60da      	str	r2, [r3, #12]
	handle_pst->GPIOx_pst->PUPDR |= tempRegValue;
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	68d9      	ldr	r1, [r3, #12]
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	69fa      	ldr	r2, [r7, #28]
 8000afa:	430a      	orrs	r2, r1
 8000afc:	60da      	str	r2, [r3, #12]
	tempRegValue = 0U;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]

	/*Configure Alternate function mode*/
	if(handle_pst->GPIO_pinCfg_st.GPIO_PinMode == GPIO_MODE_ALT_FNC)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	795b      	ldrb	r3, [r3, #5]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	d132      	bne.n	8000b70 <GPIO_init+0x354>
	{
		uint32_t temp1 = (handle_pst->GPIO_pinCfg_st.GPIO_pinNo)/8;
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	791b      	ldrb	r3, [r3, #4]
 8000b0e:	08db      	lsrs	r3, r3, #3
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	60fb      	str	r3, [r7, #12]
		uint32_t temp2 = (handle_pst->GPIO_pinCfg_st.GPIO_pinNo)%8;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	791b      	ldrb	r3, [r3, #4]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	60bb      	str	r3, [r7, #8]

		handle_pst->GPIOx_pst->AFR[temp1] &= ~ (0xF << (4* temp2));
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	68fa      	ldr	r2, [r7, #12]
 8000b24:	3208      	adds	r2, #8
 8000b26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	009b      	lsls	r3, r3, #2
 8000b2e:	210f      	movs	r1, #15
 8000b30:	fa01 f303 	lsl.w	r3, r1, r3
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4619      	mov	r1, r3
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4011      	ands	r1, r2
 8000b3e:	68fa      	ldr	r2, [r7, #12]
 8000b40:	3208      	adds	r2, #8
 8000b42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		handle_pst->GPIOx_pst->AFR[temp1] |= handle_pst->GPIO_pinCfg_st.GPIO_PinAltFncMode << (4* temp2);
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	68fa      	ldr	r2, [r7, #12]
 8000b4c:	3208      	adds	r2, #8
 8000b4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	7a5b      	ldrb	r3, [r3, #9]
 8000b56:	4619      	mov	r1, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	009b      	lsls	r3, r3, #2
 8000b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b60:	4619      	mov	r1, r3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	4311      	orrs	r1, r2
 8000b68:	68fa      	ldr	r2, [r7, #12]
 8000b6a:	3208      	adds	r2, #8
 8000b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000b70:	bf00      	nop
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bc80      	pop	{r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40013800 	.word	0x40013800
 8000b80:	40013c00 	.word	0x40013c00

08000b84 <GPIO_ReadInputPin>:

/*
 * GPIO Peripheral Read/Write API
 */
uint8_t GPIO_ReadInputPin(GPIOregdef_tst *GPIOx_pst, uint8_t pinNo)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t)((GPIOx_pst->IDR >> pinNo) & 0x1);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	691a      	ldr	r2, [r3, #16]
 8000b98:	78fb      	ldrb	r3, [r7, #3]
 8000b9a:	fa22 f303 	lsr.w	r3, r2, r3
 8000b9e:	b2db      	uxtb	r3, r3
 8000ba0:	f003 0301 	and.w	r3, r3, #1
 8000ba4:	73fb      	strb	r3, [r7, #15]
	return value;
 8000ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bc80      	pop	{r7}
 8000bb0:	4770      	bx	lr
	...

08000bb4 <SPI_PheripheralClockCfg>:
}


/* Peripheral clock enable API*/
void SPI_PheripheralClockCfg(SPIregdef_tst* SPIx, uint8_t EnOrDis)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
	if(EnOrDis == ENABLE)
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b01      	cmp	r3, #1
 8000bc4:	d12b      	bne.n	8000c1e <SPI_PheripheralClockCfg+0x6a>
	{
		if (SPIx == SPI1)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a2d      	ldr	r2, [pc, #180]	; (8000c80 <SPI_PheripheralClockCfg+0xcc>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d106      	bne.n	8000bdc <SPI_PheripheralClockCfg+0x28>
		{
			SPI1_CLK_EN();
 8000bce:	4b2d      	ldr	r3, [pc, #180]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd8:	6453      	str	r3, [r2, #68]	; 0x44
		{
			SPI4_CLK_DI();
		}
	}

}
 8000bda:	e04b      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		else if (SPIx == SPI2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a2a      	ldr	r2, [pc, #168]	; (8000c88 <SPI_PheripheralClockCfg+0xd4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d106      	bne.n	8000bf2 <SPI_PheripheralClockCfg+0x3e>
			SPI2_CLK_EN();
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bf0:	e040      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		else if (SPIx == SPI3)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a25      	ldr	r2, [pc, #148]	; (8000c8c <SPI_PheripheralClockCfg+0xd8>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d106      	bne.n	8000c08 <SPI_PheripheralClockCfg+0x54>
			SPI3_CLK_EN();
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a21      	ldr	r2, [pc, #132]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c06:	e035      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		else if (SPIx == SPI3)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <SPI_PheripheralClockCfg+0xd8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d131      	bne.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
			SPI4_CLK_EN();
 8000c10:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c14:	4a1b      	ldr	r2, [pc, #108]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c16:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c1a:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c1c:	e02a      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		if (SPIx == SPI1)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a17      	ldr	r2, [pc, #92]	; (8000c80 <SPI_PheripheralClockCfg+0xcc>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d106      	bne.n	8000c34 <SPI_PheripheralClockCfg+0x80>
			SPI1_CLK_DI();
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c2a:	4a16      	ldr	r2, [pc, #88]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c30:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c32:	e01f      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		else if (SPIx == SPI2)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a14      	ldr	r2, [pc, #80]	; (8000c88 <SPI_PheripheralClockCfg+0xd4>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d106      	bne.n	8000c4a <SPI_PheripheralClockCfg+0x96>
			SPI2_CLK_DI();
 8000c3c:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c40:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c46:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c48:	e014      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		else if (SPIx == SPI3)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4a0f      	ldr	r2, [pc, #60]	; (8000c8c <SPI_PheripheralClockCfg+0xd8>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d106      	bne.n	8000c60 <SPI_PheripheralClockCfg+0xac>
			SPI3_CLK_DI();
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	4a0b      	ldr	r2, [pc, #44]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000c5c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c5e:	e009      	b.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
		else if (SPIx == SPI3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SPI_PheripheralClockCfg+0xd8>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d105      	bne.n	8000c74 <SPI_PheripheralClockCfg+0xc0>
			SPI4_CLK_DI();
 8000c68:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	4a05      	ldr	r2, [pc, #20]	; (8000c84 <SPI_PheripheralClockCfg+0xd0>)
 8000c6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c72:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	40013000 	.word	0x40013000
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40003800 	.word	0x40003800
 8000c8c:	40003c00 	.word	0x40003c00

08000c90 <SPI_init>:

/* SPI Init and de-init*/

void SPI_init(SPI_handle_tst * handle_pst)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]

	//Clock Enable
	SPI_PheripheralClockCfg(handle_pst->SPIx_pst, ENABLE);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff ff86 	bl	8000bb4 <SPI_PheripheralClockCfg>

	/* Configure CR1 register*/

	//1: Configure Device mode
	tempreg = handle_pst->SPI_Config_tst.SPI_DeviceMode << SPI_CR1_MSTR;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	791b      	ldrb	r3, [r3, #4]
 8000cac:	009b      	lsls	r3, r3, #2
 8000cae:	60fb      	str	r3, [r7, #12]

	//2: Configure Bus Config
	if(handle_pst->SPI_Config_tst.SPI_BusConfig == SPI_BUSCFG_FULLDUPLEX)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	799b      	ldrb	r3, [r3, #6]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d104      	bne.n	8000cc2 <SPI_init+0x32>
	{
		//CLear BiDi mode
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	e01d      	b.n	8000cfe <SPI_init+0x6e>
	}
	else if(handle_pst->SPI_Config_tst.SPI_BusConfig == SPI_BUSCFG_HALFDUPLEX)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	799b      	ldrb	r3, [r3, #6]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d104      	bne.n	8000cd4 <SPI_init+0x44>
	{
		//Set BiDi Mode
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	e014      	b.n	8000cfe <SPI_init+0x6e>
	}
	else if(handle_pst->SPI_Config_tst.SPI_BusConfig == SPI_BUSCFG_SIMPLEX_RX)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	799b      	ldrb	r3, [r3, #6]
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d108      	bne.n	8000cee <SPI_init+0x5e>
	{
		//Clear BiDi mode
		//Enable RX only
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000ce2:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << SPI_CR1_RXONLY);
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	e007      	b.n	8000cfe <SPI_init+0x6e>
	}
	else
	{
		//Clear BiDi mode
		//Disable RX only
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf4:	60fb      	str	r3, [r7, #12]
		tempreg &= ~(1 << SPI_CR1_RXONLY);
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cfc:	60fb      	str	r3, [r7, #12]
	}

	//3: Configure Baud rate
	tempreg |= (handle_pst->SPI_Config_tst.SPI_BaudRate << SPI_CR1_BR);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	795b      	ldrb	r3, [r3, #5]
 8000d02:	00db      	lsls	r3, r3, #3
 8000d04:	461a      	mov	r2, r3
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	4313      	orrs	r3, r2
 8000d0a:	60fb      	str	r3, [r7, #12]

	//4. Configure CPOL
	tempreg |= (handle_pst->SPI_Config_tst.SPI_CPOL << SPI_CR1_CPOL);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	79db      	ldrb	r3, [r3, #7]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]

	//5. Configure CPHA
	tempreg |= (handle_pst->SPI_Config_tst.SPI_CPHA << SPI_CR1_CPHA);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	7a1b      	ldrb	r3, [r3, #8]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]

	//6. Configure DFF
	tempreg |= (handle_pst->SPI_Config_tst.SPI_DFF << SPI_CR1_DFF);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	7a5b      	ldrb	r3, [r3, #9]
 8000d2a:	02db      	lsls	r3, r3, #11
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	60fb      	str	r3, [r7, #12]

	//7. Configure SSM and SSI
	tempreg |= (handle_pst->SPI_Config_tst.SPI_SSM << SPI_CR1_SSM);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7a9b      	ldrb	r3, [r3, #10]
 8000d38:	025b      	lsls	r3, r3, #9
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	4313      	orrs	r3, r2
 8000d40:	60fb      	str	r3, [r7, #12]

	tempreg |= (handle_pst->SPI_Config_tst.SPI_SSI << SPI_CR1_SSI);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7adb      	ldrb	r3, [r3, #11]
 8000d46:	021b      	lsls	r3, r3, #8
 8000d48:	461a      	mov	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]

	handle_pst->SPIx_pst->CR1 = tempreg;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	68fa      	ldr	r2, [r7, #12]
 8000d56:	601a      	str	r2, [r3, #0]

}
 8000d58:	bf00      	nop
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <SPI_SendData>:
}

/*SPI send and recieve*/

void SPI_SendData(SPIregdef_tst* SPIx, uint8_t * dataBuff_pu8, uint32_t dataLen_u32)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
	//Loop through complete buff length
	while(dataLen_u32 >0)
 8000d6c:	e026      	b.n	8000dbc <SPI_SendData+0x5c>
	{
		//Wait until Tx buf is empty
		while(!(SPIx->SR & (1 << SPI_SR_TXE)));
 8000d6e:	bf00      	nop
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	689b      	ldr	r3, [r3, #8]
 8000d74:	f003 0302 	and.w	r3, r3, #2
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d0f9      	beq.n	8000d70 <SPI_SendData+0x10>

		//Check DFF
		if(SPIx->CR1 & (1 << SPI_CR1_DFF))
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00e      	beq.n	8000da6 <SPI_SendData+0x46>
		{
			//16bit mode
			SPIx->DR = *((uint16_t*)dataBuff_pu8);
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	881b      	ldrh	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	60da      	str	r2, [r3, #12]
			dataLen_u32--;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	3b01      	subs	r3, #1
 8000d96:	607b      	str	r3, [r7, #4]
			dataLen_u32--;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	607b      	str	r3, [r7, #4]
			(uint16_t*)(dataBuff_pu8++);
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	3301      	adds	r3, #1
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	e00a      	b.n	8000dbc <SPI_SendData+0x5c>
		}
		else
		{
			//8bit mode
			SPIx->DR = *dataBuff_pu8;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	461a      	mov	r2, r3
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	60da      	str	r2, [r3, #12]
			dataLen_u32--;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	3b01      	subs	r3, #1
 8000db4:	607b      	str	r3, [r7, #4]
			dataBuff_pu8++;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	3301      	adds	r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
	while(dataLen_u32 >0)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d1d5      	bne.n	8000d6e <SPI_SendData+0xe>
		}
	}

}
 8000dc2:	bf00      	nop
 8000dc4:	3714      	adds	r7, #20
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bc80      	pop	{r7}
 8000dca:	4770      	bx	lr

08000dcc <SPI_RecieveData>:

void SPI_RecieveData(SPIregdef_tst* SPIx, uint8_t * dataBuff_pu8, uint32_t dataLen_u32)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
	//Loop through complete buff length
	while(dataLen_u32 >0)
 8000dd8:	e026      	b.n	8000e28 <SPI_RecieveData+0x5c>
	{
		//Wait until Rx buf is Full
		while(!(SPIx->SR & (1 << SPI_SR_RXNE)));
 8000dda:	bf00      	nop
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d0f9      	beq.n	8000ddc <SPI_RecieveData+0x10>

		//Check DFF
		if(SPIx->CR1 & (1 << SPI_CR1_DFF))
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d00e      	beq.n	8000e12 <SPI_RecieveData+0x46>
		{
			//16bit mode
			*((uint16_t*)dataBuff_pu8) = SPIx->DR;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	801a      	strh	r2, [r3, #0]
			dataLen_u32--;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3b01      	subs	r3, #1
 8000e02:	607b      	str	r3, [r7, #4]
			dataLen_u32--;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	607b      	str	r3, [r7, #4]
			(uint16_t*)(dataBuff_pu8++);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	e00a      	b.n	8000e28 <SPI_RecieveData+0x5c>
		}
		else
		{
			//8bit mode
			*dataBuff_pu8 = SPIx->DR;
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	b2da      	uxtb	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	701a      	strb	r2, [r3, #0]
			dataLen_u32--;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	607b      	str	r3, [r7, #4]
			dataBuff_pu8++;
 8000e22:	68bb      	ldr	r3, [r7, #8]
 8000e24:	3301      	adds	r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
	while(dataLen_u32 >0)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1d5      	bne.n	8000dda <SPI_RecieveData+0xe>
		}
	}
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <SPI_PeripheralEnable>:
		SPI_OVRErrIrqHandler(handle_pst);
	}
}

void SPI_PeripheralEnable(SPIregdef_tst* SPIx, uint8_t EnorDis)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
	if(EnorDis == ENABLE)
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b01      	cmp	r3, #1
 8000e48:	d106      	bne.n	8000e58 <SPI_PeripheralEnable+0x20>
	{
		SPIx->CR1 |= (1<<SPI_CR1_SPE);
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	601a      	str	r2, [r3, #0]
	}
	else
	{
		SPIx->CR1 &= ~(1<<SPI_CR1_SPE);
	}
}
 8000e56:	e005      	b.n	8000e64 <SPI_PeripheralEnable+0x2c>
		SPIx->CR1 &= ~(1<<SPI_CR1_SPE);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	601a      	str	r2, [r3, #0]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr

08000e6e <SPI_GetBusyFlagStatus>:

uint8_t SPI_GetBusyFlagStatus(SPIregdef_tst* SPIx)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	b083      	sub	sp, #12
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
	return (SPIx->SR & (1 << SPI_SR_BSY));
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000e80:	b2db      	uxtb	r3, r3
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr

08000e8c <SPI_SSOEControl>:

void SPI_SSOEControl(SPIregdef_tst* SPIx, uint8_t EnorDis)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	70fb      	strb	r3, [r7, #3]
	if(ENABLE == EnorDis)
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d106      	bne.n	8000eac <SPI_SSOEControl+0x20>
	{
		SPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f043 0204 	orr.w	r2, r3, #4
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	605a      	str	r2, [r3, #4]
	}
	else
	{
		SPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}
}
 8000eaa:	e005      	b.n	8000eb8 <SPI_SSOEControl+0x2c>
		SPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f023 0204 	bic.w	r2, r3, #4
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	605a      	str	r2, [r3, #4]
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr
	...

08000ec4 <__libc_init_array>:
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	4e0d      	ldr	r6, [pc, #52]	; (8000efc <__libc_init_array+0x38>)
 8000ec8:	4c0d      	ldr	r4, [pc, #52]	; (8000f00 <__libc_init_array+0x3c>)
 8000eca:	1ba4      	subs	r4, r4, r6
 8000ecc:	10a4      	asrs	r4, r4, #2
 8000ece:	2500      	movs	r5, #0
 8000ed0:	42a5      	cmp	r5, r4
 8000ed2:	d109      	bne.n	8000ee8 <__libc_init_array+0x24>
 8000ed4:	4e0b      	ldr	r6, [pc, #44]	; (8000f04 <__libc_init_array+0x40>)
 8000ed6:	4c0c      	ldr	r4, [pc, #48]	; (8000f08 <__libc_init_array+0x44>)
 8000ed8:	f000 f820 	bl	8000f1c <_init>
 8000edc:	1ba4      	subs	r4, r4, r6
 8000ede:	10a4      	asrs	r4, r4, #2
 8000ee0:	2500      	movs	r5, #0
 8000ee2:	42a5      	cmp	r5, r4
 8000ee4:	d105      	bne.n	8000ef2 <__libc_init_array+0x2e>
 8000ee6:	bd70      	pop	{r4, r5, r6, pc}
 8000ee8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000eec:	4798      	blx	r3
 8000eee:	3501      	adds	r5, #1
 8000ef0:	e7ee      	b.n	8000ed0 <__libc_init_array+0xc>
 8000ef2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000ef6:	4798      	blx	r3
 8000ef8:	3501      	adds	r5, #1
 8000efa:	e7f2      	b.n	8000ee2 <__libc_init_array+0x1e>
 8000efc:	08000f58 	.word	0x08000f58
 8000f00:	08000f58 	.word	0x08000f58
 8000f04:	08000f58 	.word	0x08000f58
 8000f08:	08000f5c 	.word	0x08000f5c

08000f0c <memset>:
 8000f0c:	4402      	add	r2, r0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d100      	bne.n	8000f16 <memset+0xa>
 8000f14:	4770      	bx	lr
 8000f16:	f803 1b01 	strb.w	r1, [r3], #1
 8000f1a:	e7f9      	b.n	8000f10 <memset+0x4>

08000f1c <_init>:
 8000f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f1e:	bf00      	nop
 8000f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f22:	bc08      	pop	{r3}
 8000f24:	469e      	mov	lr, r3
 8000f26:	4770      	bx	lr

08000f28 <_fini>:
 8000f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f2a:	bf00      	nop
 8000f2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f2e:	bc08      	pop	{r3}
 8000f30:	469e      	mov	lr, r3
 8000f32:	4770      	bx	lr
